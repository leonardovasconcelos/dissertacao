%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 288 168
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, March 4, 2016 4:58:06 PM BRT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
288 168 setpagesize
0 0 0 0 setmargins
0 0 setorigin
288 168 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
288.000 0.00000 l
288.000 168.000 l
0.00000 168.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
288.000 0.00000 l
288.000 168.000 l
0.00000 168.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 288 168 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -674.000 -450.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
674.000 450.000 m
962.000 450.000 l
962.000 618.000 l
674.000 618.000 l
674.000 450.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -674.000 -450.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -674.000 -450.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -674.000 -450.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
920.607 583.004 m
926.232 583.004 l
926.232 583.504 l
923.060 591.754 l
921.826 591.754 l
924.810 584.004 l
920.607 584.004 l
920.607 583.004 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
927.734 562.548 m
927.359 562.538 927.151 562.345 927.109 561.970  c
927.109 561.866 927.138 561.764 927.195 561.665  c
927.252 561.566 927.333 561.488 927.437 561.431  c
927.541 561.374 927.651 561.345 927.765 561.345  c
927.869 561.345 927.976 561.374 928.086 561.431  c
928.195 561.488 928.276 561.566 928.328 561.665  c
928.380 561.764 928.406 561.866 928.406 561.970  c
928.395 562.220 928.276 562.392 928.047 562.486  c
929.453 565.439 l
929.140 561.329 l
928.817 561.329 928.619 561.147 928.547 560.782  c
928.547 560.678 928.575 560.577 928.632 560.478  c
928.690 560.379 928.770 560.303 928.875 560.251  c
928.979 560.199 929.093 560.173 929.218 560.173  c
929.323 560.173 929.427 560.199 929.531 560.251  c
929.635 560.303 929.716 560.379 929.773 560.478  c
929.830 560.577 929.859 560.678 929.859 560.782  c
929.849 560.960 929.755 561.116 929.578 561.251  c
930.687 565.626 l
930.937 560.829 l
930.677 560.715 930.541 560.564 930.531 560.376  c
930.531 560.262 930.560 560.155 930.617 560.056  c
930.674 559.957 930.755 559.881 930.859 559.829  c
930.963 559.777 931.067 559.751 931.172 559.751  c
931.286 559.751 931.395 559.777 931.500 559.829  c
931.604 559.881 931.685 559.957 931.742 560.056  c
931.799 560.155 931.828 560.262 931.828 560.376  c
931.817 560.585 931.682 560.736 931.422 560.829  c
931.640 565.642 l
932.734 561.314 l
932.557 561.126 932.468 560.949 932.468 560.782  c
932.468 560.678 932.494 560.577 932.547 560.478  c
932.599 560.379 932.679 560.303 932.789 560.251  c
932.898 560.199 933.005 560.173 933.109 560.173  c
933.224 560.173 933.333 560.199 933.437 560.251  c
933.541 560.303 933.622 560.379 933.679 560.478  c
933.737 560.577 933.765 560.678 933.765 560.782  c
933.724 561.116 933.536 561.314 933.203 561.376  c
932.656 565.439 l
934.172 562.423 l
934.005 562.298 933.922 562.147 933.922 561.970  c
933.922 561.866 933.948 561.764 934.000 561.665  c
934.052 561.566 934.130 561.491 934.234 561.439  c
934.338 561.387 934.448 561.361 934.562 561.361  c
934.677 561.361 934.786 561.387 934.890 561.439  c
934.994 561.491 935.075 561.566 935.132 561.665  c
935.190 561.764 935.218 561.866 935.218 561.970  c
935.166 562.345 934.948 562.532 934.562 562.532  c
933.625 565.236 l
933.625 568.517 l
928.578 568.517 l
928.578 565.236 l
927.734 562.548 l
h
933.281 566.423 m
933.281 565.970 l
929.031 565.970 l
929.031 566.423 l
933.281 566.423 l
h
933.281 568.173 m
933.281 567.720 l
929.031 567.720 l
929.031 568.173 l
933.281 568.173 l
h
937.523 559.767 m
943.148 559.767 l
943.148 560.267 l
939.976 568.517 l
938.742 568.517 l
941.726 560.767 l
937.523 560.767 l
937.523 559.767 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
938.440 587.600 m
938.440 595.884 931.724 602.600 923.440 602.600  c
915.156 602.600 908.440 595.884 908.440 587.600  c
908.440 579.316 915.156 572.600 923.440 572.600  c
931.724 572.600 938.440 579.316 938.440 587.600  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
924.154 506.436 m
921.169 511.107 l
924.154 511.107 l
924.154 506.436 l
h
923.841 505.404 m
925.341 505.404 l
925.341 511.107 l
926.591 511.107 l
926.591 512.092 l
925.341 512.092 l
925.341 514.154 l
924.154 514.154 l
924.154 512.092 l
920.216 512.092 l
920.216 510.951 l
923.841 505.404 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
889.064 508.186 m
888.689 508.175 888.480 507.982 888.439 507.607  c
888.439 507.503 888.467 507.402 888.525 507.303  c
888.582 507.204 888.663 507.126 888.767 507.068  c
888.871 507.011 888.980 506.982 889.095 506.982  c
889.199 506.982 889.306 507.011 889.415 507.068  c
889.525 507.126 889.605 507.204 889.657 507.303  c
889.710 507.402 889.736 507.503 889.736 507.607  c
889.725 507.857 889.605 508.029 889.376 508.123  c
890.782 511.076 l
890.470 506.967 l
890.147 506.967 889.949 506.785 889.876 506.420  c
889.876 506.316 889.905 506.214 889.962 506.115  c
890.019 506.016 890.100 505.941 890.204 505.889  c
890.309 505.837 890.423 505.811 890.548 505.811  c
890.652 505.811 890.756 505.837 890.861 505.889  c
890.965 505.941 891.045 506.016 891.103 506.115  c
891.160 506.214 891.189 506.316 891.189 506.420  c
891.178 506.597 891.085 506.753 890.907 506.889  c
892.017 511.264 l
892.267 506.467 l
892.006 506.352 891.871 506.201 891.861 506.014  c
891.861 505.899 891.889 505.792 891.947 505.693  c
892.004 505.594 892.085 505.519 892.189 505.467  c
892.293 505.415 892.397 505.389 892.501 505.389  c
892.616 505.389 892.725 505.415 892.829 505.467  c
892.934 505.519 893.014 505.594 893.072 505.693  c
893.129 505.792 893.157 505.899 893.157 506.014  c
893.147 506.222 893.012 506.373 892.751 506.467  c
892.970 511.279 l
894.064 506.951 l
893.887 506.764 893.798 506.587 893.798 506.420  c
893.798 506.316 893.824 506.214 893.876 506.115  c
893.928 506.016 894.009 505.941 894.118 505.889  c
894.228 505.837 894.335 505.811 894.439 505.811  c
894.553 505.811 894.663 505.837 894.767 505.889  c
894.871 505.941 894.952 506.016 895.009 506.115  c
895.066 506.214 895.095 506.316 895.095 506.420  c
895.053 506.753 894.866 506.951 894.532 507.014  c
893.986 511.076 l
895.501 508.061 l
895.335 507.936 895.251 507.785 895.251 507.607  c
895.251 507.503 895.277 507.402 895.329 507.303  c
895.381 507.204 895.460 507.128 895.564 507.076  c
895.668 507.024 895.777 506.998 895.892 506.998  c
896.006 506.998 896.116 507.024 896.220 507.076  c
896.324 507.128 896.405 507.204 896.462 507.303  c
896.519 507.402 896.548 507.503 896.548 507.607  c
896.496 507.982 896.277 508.170 895.892 508.170  c
894.954 510.873 l
894.954 514.154 l
889.907 514.154 l
889.907 510.873 l
889.064 508.186 l
h
894.611 512.061 m
894.611 511.607 l
890.361 511.607 l
890.361 512.061 l
894.611 512.061 l
h
894.611 513.811 m
894.611 513.357 l
890.361 513.357 l
890.361 513.811 l
894.611 513.811 l
h
902.400 506.436 m
899.415 511.107 l
902.400 511.107 l
902.400 506.436 l
h
902.087 505.404 m
903.587 505.404 l
903.587 511.107 l
904.837 511.107 l
904.837 512.092 l
903.587 512.092 l
903.587 514.154 l
902.400 514.154 l
902.400 512.092 l
898.462 512.092 l
898.462 510.951 l
902.087 505.404 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
938.440 510.000 m
938.440 518.284 931.724 525.000 923.440 525.000  c
915.156 525.000 908.440 518.284 908.440 510.000  c
908.440 501.716 915.156 495.000 923.440 495.000  c
931.724 495.000 938.440 501.716 938.440 510.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
795.298 509.436 m
795.860 509.561 796.300 509.813 796.618 510.193  c
796.936 510.574 797.094 511.045 797.094 511.607  c
797.094 512.472 796.798 513.141 796.204 513.615  c
795.610 514.089 794.766 514.326 793.673 514.326  c
793.308 514.326 792.930 514.290 792.540 514.217  c
792.149 514.144 791.751 514.035 791.344 513.889  c
791.344 512.748 l
791.667 512.936 792.024 513.079 792.415 513.178  c
792.805 513.277 793.214 513.326 793.641 513.326  c
794.381 513.326 794.946 513.180 795.337 512.889  c
795.727 512.597 795.923 512.170 795.923 511.607  c
795.923 511.097 795.740 510.696 795.376 510.404  c
795.011 510.113 794.511 509.967 793.876 509.967  c
792.844 509.967 l
792.844 508.998 l
793.923 508.998 l
794.496 508.998 794.938 508.881 795.251 508.646  c
795.563 508.412 795.719 508.076 795.719 507.639  c
795.719 507.191 795.561 506.847 795.243 506.607  c
794.925 506.368 794.469 506.248 793.876 506.248  c
793.542 506.248 793.191 506.282 792.821 506.350  c
792.451 506.417 792.042 506.524 791.594 506.670  c
791.594 505.623 l
792.053 505.498 792.477 505.404 792.868 505.342  c
793.259 505.279 793.626 505.248 793.969 505.248  c
794.876 505.248 795.589 505.451 796.110 505.857  c
796.631 506.264 796.891 506.816 796.891 507.514  c
796.891 508.003 796.753 508.415 796.477 508.748  c
796.201 509.081 795.808 509.311 795.298 509.436  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
786.997 480.201 m
786.622 480.191 786.413 479.998 786.372 479.623  c
786.372 479.519 786.400 479.417 786.458 479.318  c
786.515 479.219 786.596 479.141 786.700 479.084  c
786.804 479.027 786.913 478.998 787.028 478.998  c
787.132 478.998 787.239 479.027 787.348 479.084  c
787.458 479.141 787.538 479.219 787.591 479.318  c
787.643 479.417 787.669 479.519 787.669 479.623  c
787.658 479.873 787.538 480.045 787.309 480.139  c
788.716 483.092 l
788.403 478.982 l
788.080 478.982 787.882 478.800 787.809 478.436  c
787.809 478.331 787.838 478.230 787.895 478.131  c
787.953 478.032 788.033 477.956 788.137 477.904  c
788.242 477.852 788.356 477.826 788.481 477.826  c
788.585 477.826 788.690 477.852 788.794 477.904  c
788.898 477.956 788.979 478.032 789.036 478.131  c
789.093 478.230 789.122 478.331 789.122 478.436  c
789.111 478.613 789.018 478.769 788.841 478.904  c
789.950 483.279 l
790.200 478.482 l
789.940 478.368 789.804 478.217 789.794 478.029  c
789.794 477.915 789.822 477.808 789.880 477.709  c
789.937 477.610 790.018 477.535 790.122 477.482  c
790.226 477.430 790.330 477.404 790.434 477.404  c
790.549 477.404 790.658 477.430 790.762 477.482  c
790.867 477.535 790.947 477.610 791.005 477.709  c
791.062 477.808 791.091 477.915 791.091 478.029  c
791.080 478.238 790.945 478.389 790.684 478.482  c
790.903 483.295 l
791.997 478.967 l
791.820 478.779 791.731 478.602 791.731 478.436  c
791.731 478.331 791.757 478.230 791.809 478.131  c
791.861 478.032 791.942 477.956 792.052 477.904  c
792.161 477.852 792.268 477.826 792.372 477.826  c
792.486 477.826 792.596 477.852 792.700 477.904  c
792.804 477.956 792.885 478.032 792.942 478.131  c
792.999 478.230 793.028 478.331 793.028 478.436  c
792.986 478.769 792.799 478.967 792.466 479.029  c
791.919 483.092 l
793.434 480.076 l
793.268 479.951 793.184 479.800 793.184 479.623  c
793.184 479.519 793.210 479.417 793.262 479.318  c
793.315 479.219 793.393 479.144 793.497 479.092  c
793.601 479.040 793.710 479.014 793.825 479.014  c
793.940 479.014 794.049 479.040 794.153 479.092  c
794.257 479.144 794.338 479.219 794.395 479.318  c
794.453 479.417 794.481 479.519 794.481 479.623  c
794.429 479.998 794.210 480.186 793.825 480.186  c
792.887 482.889 l
792.887 486.170 l
787.841 486.170 l
787.841 482.889 l
786.997 480.201 l
h
792.544 484.076 m
792.544 483.623 l
788.294 483.623 l
788.294 484.076 l
792.544 484.076 l
h
792.544 485.826 m
792.544 485.373 l
788.294 485.373 l
788.294 485.826 l
792.544 485.826 l
h
800.677 481.451 m
801.239 481.576 801.679 481.829 801.997 482.209  c
802.315 482.589 802.473 483.061 802.473 483.623  c
802.473 484.488 802.177 485.157 801.583 485.631  c
800.989 486.105 800.145 486.342 799.052 486.342  c
798.687 486.342 798.309 486.305 797.919 486.232  c
797.528 486.160 797.130 486.050 796.723 485.904  c
796.723 484.764 l
797.046 484.951 797.403 485.094 797.794 485.193  c
798.184 485.292 798.593 485.342 799.020 485.342  c
799.760 485.342 800.325 485.196 800.716 484.904  c
801.106 484.613 801.302 484.186 801.302 483.623  c
801.302 483.113 801.119 482.712 800.755 482.420  c
800.390 482.128 799.890 481.982 799.255 481.982  c
798.223 481.982 l
798.223 481.014 l
799.302 481.014 l
799.874 481.014 800.317 480.896 800.630 480.662  c
800.942 480.428 801.098 480.092 801.098 479.654  c
801.098 479.206 800.940 478.863 800.622 478.623  c
800.304 478.383 799.848 478.264 799.255 478.264  c
798.921 478.264 798.570 478.298 798.200 478.365  c
797.830 478.433 797.421 478.540 796.973 478.686  c
796.973 477.639 l
797.432 477.514 797.856 477.420 798.247 477.357  c
798.637 477.295 799.005 477.264 799.348 477.264  c
800.255 477.264 800.968 477.467 801.489 477.873  c
802.010 478.279 802.270 478.831 802.270 479.529  c
802.270 480.019 802.132 480.430 801.856 480.764  c
801.580 481.097 801.187 481.326 800.677 481.451  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
809.240 510.000 m
809.240 518.284 802.524 525.000 794.240 525.000  c
785.956 525.000 779.240 518.284 779.240 510.000  c
779.240 501.716 785.956 495.000 794.240 495.000  c
802.524 495.000 809.240 501.716 809.240 510.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
734.391 581.085 m
733.860 581.085 733.438 581.268 733.126 581.632  c
732.813 581.997 732.657 582.492 732.657 583.117  c
732.657 583.752 732.813 584.252 733.126 584.617  c
733.438 584.981 733.860 585.164 734.391 585.164  c
734.923 585.164 735.342 584.981 735.649 584.617  c
735.956 584.252 736.110 583.752 736.110 583.117  c
736.110 582.492 735.956 581.997 735.649 581.632  c
735.342 581.268 734.923 581.085 734.391 581.085  c
h
736.735 577.367 m
736.735 578.445 l
736.433 578.309 736.131 578.205 735.829 578.132  c
735.527 578.059 735.230 578.023 734.938 578.023  c
734.157 578.023 733.561 578.286 733.149 578.812  c
732.738 579.338 732.501 580.132 732.438 581.195  c
732.667 580.861 732.956 580.604 733.305 580.421  c
733.654 580.239 734.037 580.148 734.454 580.148  c
735.329 580.148 736.022 580.414 736.532 580.945  c
737.042 581.476 737.298 582.200 737.298 583.117  c
737.298 584.023 737.032 584.747 736.501 585.289  c
735.969 585.830 735.266 586.101 734.391 586.101  c
733.371 586.101 732.594 585.713 732.063 584.937  c
731.532 584.161 731.266 583.039 731.266 581.570  c
731.266 580.184 731.594 579.080 732.251 578.257  c
732.907 577.434 733.787 577.023 734.891 577.023  c
735.183 577.023 735.480 577.052 735.782 577.109  c
736.084 577.166 736.402 577.252 736.735 577.367  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
726.997 551.976 m
726.622 551.966 726.413 551.773 726.372 551.398  c
726.372 551.294 726.400 551.192 726.458 551.093  c
726.515 550.994 726.596 550.916 726.700 550.859  c
726.804 550.802 726.913 550.773 727.028 550.773  c
727.132 550.773 727.239 550.802 727.348 550.859  c
727.458 550.916 727.538 550.994 727.591 551.093  c
727.643 551.192 727.669 551.294 727.669 551.398  c
727.658 551.648 727.538 551.820 727.309 551.914  c
728.716 554.867 l
728.403 550.757 l
728.080 550.757 727.882 550.575 727.809 550.210  c
727.809 550.106 727.838 550.005 727.895 549.906  c
727.953 549.807 728.033 549.731 728.137 549.679  c
728.242 549.627 728.356 549.601 728.481 549.601  c
728.585 549.601 728.690 549.627 728.794 549.679  c
728.898 549.731 728.979 549.807 729.036 549.906  c
729.093 550.005 729.122 550.106 729.122 550.210  c
729.111 550.388 729.018 550.544 728.841 550.679  c
729.950 555.054 l
730.200 550.257 l
729.940 550.143 729.804 549.992 729.794 549.804  c
729.794 549.690 729.822 549.583 729.880 549.484  c
729.937 549.385 730.018 549.309 730.122 549.257  c
730.226 549.205 730.330 549.179 730.434 549.179  c
730.549 549.179 730.658 549.205 730.762 549.257  c
730.867 549.309 730.947 549.385 731.005 549.484  c
731.062 549.583 731.091 549.690 731.091 549.804  c
731.080 550.013 730.945 550.164 730.684 550.257  c
730.903 555.070 l
731.997 550.742 l
731.820 550.554 731.731 550.377 731.731 550.210  c
731.731 550.106 731.757 550.005 731.809 549.906  c
731.861 549.807 731.942 549.731 732.052 549.679  c
732.161 549.627 732.268 549.601 732.372 549.601  c
732.486 549.601 732.596 549.627 732.700 549.679  c
732.804 549.731 732.885 549.807 732.942 549.906  c
732.999 550.005 733.028 550.106 733.028 550.210  c
732.986 550.544 732.799 550.742 732.466 550.804  c
731.919 554.867 l
733.434 551.851 l
733.268 551.726 733.184 551.575 733.184 551.398  c
733.184 551.294 733.210 551.192 733.262 551.093  c
733.315 550.994 733.393 550.919 733.497 550.867  c
733.601 550.815 733.710 550.789 733.825 550.789  c
733.940 550.789 734.049 550.815 734.153 550.867  c
734.257 550.919 734.338 550.994 734.395 551.093  c
734.453 551.192 734.481 551.294 734.481 551.398  c
734.429 551.773 734.210 551.960 733.825 551.960  c
732.887 554.664 l
732.887 557.945 l
727.841 557.945 l
727.841 554.664 l
726.997 551.976 l
h
732.544 555.851 m
732.544 555.398 l
728.294 555.398 l
728.294 555.851 l
732.544 555.851 l
h
732.544 557.601 m
732.544 557.148 l
728.294 557.148 l
728.294 557.601 l
732.544 557.601 l
h
739.770 553.101 m
739.239 553.101 738.817 553.283 738.505 553.648  c
738.192 554.013 738.036 554.507 738.036 555.132  c
738.036 555.768 738.192 556.268 738.505 556.632  c
738.817 556.997 739.239 557.179 739.770 557.179  c
740.302 557.179 740.721 556.997 741.028 556.632  c
741.335 556.268 741.489 555.768 741.489 555.132  c
741.489 554.507 741.335 554.013 741.028 553.648  c
740.721 553.283 740.302 553.101 739.770 553.101  c
h
742.114 549.382 m
742.114 550.460 l
741.812 550.325 741.510 550.221 741.208 550.148  c
740.906 550.075 740.609 550.039 740.317 550.039  c
739.536 550.039 738.940 550.302 738.528 550.828  c
738.117 551.354 737.880 552.148 737.817 553.210  c
738.046 552.877 738.335 552.619 738.684 552.437  c
739.033 552.255 739.416 552.164 739.833 552.164  c
740.708 552.164 741.400 552.429 741.911 552.960  c
742.421 553.492 742.677 554.216 742.677 555.132  c
742.677 556.039 742.411 556.763 741.880 557.304  c
741.348 557.846 740.645 558.117 739.770 558.117  c
738.749 558.117 737.973 557.729 737.442 556.953  c
736.911 556.177 736.645 555.054 736.645 553.585  c
736.645 552.200 736.973 551.096 737.630 550.273  c
738.286 549.450 739.166 549.039 740.270 549.039  c
740.562 549.039 740.859 549.067 741.161 549.125  c
741.463 549.182 741.781 549.268 742.114 549.382  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
749.240 581.775 m
749.240 590.059 742.524 596.775 734.240 596.775  c
725.956 596.775 719.240 590.059 719.240 581.775  c
719.240 573.491 725.956 566.775 734.240 566.775  c
742.524 566.775 749.240 573.491 749.240 581.775  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
837.479 565.404 m
842.120 565.404 l
842.120 566.404 l
838.558 566.404 l
838.558 568.545 l
838.735 568.482 838.909 568.438 839.081 568.412  c
839.253 568.386 839.422 568.373 839.589 568.373  c
840.568 568.373 841.344 568.641 841.917 569.178  c
842.490 569.714 842.776 570.436 842.776 571.342  c
842.776 572.290 842.482 573.024 841.894 573.545  c
841.305 574.066 840.479 574.326 839.417 574.326  c
839.042 574.326 838.664 574.295 838.284 574.232  c
837.904 574.170 837.511 574.076 837.104 573.951  c
837.104 572.764 l
837.459 572.951 837.823 573.092 838.198 573.186  c
838.573 573.279 838.969 573.326 839.386 573.326  c
840.063 573.326 840.599 573.149 840.995 572.795  c
841.391 572.441 841.589 571.956 841.589 571.342  c
841.589 570.738 841.391 570.258 840.995 569.904  c
840.599 569.550 840.063 569.373 839.386 569.373  c
839.073 569.373 838.758 569.407 838.440 569.475  c
838.123 569.542 837.802 569.649 837.479 569.795  c
837.479 565.404 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
832.757 540.201 m
832.382 540.191 832.174 539.998 832.132 539.623  c
832.132 539.519 832.160 539.417 832.218 539.318  c
832.275 539.219 832.356 539.141 832.460 539.084  c
832.564 539.027 832.674 538.998 832.788 538.998  c
832.892 538.998 832.999 539.027 833.108 539.084  c
833.218 539.141 833.299 539.219 833.351 539.318  c
833.403 539.417 833.429 539.519 833.429 539.623  c
833.418 539.873 833.299 540.045 833.069 540.139  c
834.476 543.092 l
834.163 538.982 l
833.840 538.982 833.642 538.800 833.569 538.436  c
833.569 538.331 833.598 538.230 833.655 538.131  c
833.713 538.032 833.793 537.956 833.897 537.904  c
834.002 537.852 834.116 537.826 834.241 537.826  c
834.345 537.826 834.450 537.852 834.554 537.904  c
834.658 537.956 834.739 538.032 834.796 538.131  c
834.853 538.230 834.882 538.331 834.882 538.436  c
834.871 538.613 834.778 538.769 834.601 538.904  c
835.710 543.279 l
835.960 538.482 l
835.700 538.368 835.564 538.217 835.554 538.029  c
835.554 537.915 835.582 537.808 835.640 537.709  c
835.697 537.610 835.778 537.535 835.882 537.482  c
835.986 537.430 836.090 537.404 836.194 537.404  c
836.309 537.404 836.418 537.430 836.522 537.482  c
836.627 537.535 836.707 537.610 836.765 537.709  c
836.822 537.808 836.851 537.915 836.851 538.029  c
836.840 538.238 836.705 538.389 836.444 538.482  c
836.663 543.295 l
837.757 538.967 l
837.580 538.779 837.491 538.602 837.491 538.436  c
837.491 538.331 837.517 538.230 837.569 538.131  c
837.621 538.032 837.702 537.956 837.812 537.904  c
837.921 537.852 838.028 537.826 838.132 537.826  c
838.246 537.826 838.356 537.852 838.460 537.904  c
838.564 537.956 838.645 538.032 838.702 538.131  c
838.759 538.230 838.788 538.331 838.788 538.436  c
838.746 538.769 838.559 538.967 838.226 539.029  c
837.679 543.092 l
839.194 540.076 l
839.028 539.951 838.944 539.800 838.944 539.623  c
838.944 539.519 838.970 539.417 839.022 539.318  c
839.075 539.219 839.153 539.144 839.257 539.092  c
839.361 539.040 839.470 539.014 839.585 539.014  c
839.700 539.014 839.809 539.040 839.913 539.092  c
840.017 539.144 840.098 539.219 840.155 539.318  c
840.213 539.417 840.241 539.519 840.241 539.623  c
840.189 539.998 839.970 540.186 839.585 540.186  c
838.647 542.889 l
838.647 546.170 l
833.601 546.170 l
833.601 542.889 l
832.757 540.201 l
h
838.304 544.076 m
838.304 543.623 l
834.054 543.623 l
834.054 544.076 l
838.304 544.076 l
h
838.304 545.826 m
838.304 545.373 l
834.054 545.373 l
834.054 545.826 l
838.304 545.826 l
h
842.858 537.420 m
847.499 537.420 l
847.499 538.420 l
843.937 538.420 l
843.937 540.561 l
844.114 540.498 844.288 540.454 844.460 540.428  c
844.632 540.402 844.801 540.389 844.968 540.389  c
845.947 540.389 846.723 540.657 847.296 541.193  c
847.869 541.730 848.155 542.451 848.155 543.357  c
848.155 544.305 847.861 545.040 847.272 545.561  c
846.684 546.081 845.858 546.342 844.796 546.342  c
844.421 546.342 844.043 546.311 843.663 546.248  c
843.283 546.186 842.890 546.092 842.483 545.967  c
842.483 544.779 l
842.838 544.967 843.202 545.107 843.577 545.201  c
843.952 545.295 844.348 545.342 844.765 545.342  c
845.442 545.342 845.978 545.165 846.374 544.811  c
846.770 544.456 846.968 543.972 846.968 543.357  c
846.968 542.753 846.770 542.274 846.374 541.920  c
845.978 541.566 845.442 541.389 844.765 541.389  c
844.452 541.389 844.137 541.423 843.819 541.490  c
843.502 541.558 843.181 541.665 842.858 541.811  c
842.858 537.420 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
855.000 570.000 m
855.000 578.284 848.284 585.000 840.000 585.000  c
831.716 585.000 825.000 578.284 825.000 570.000  c
825.000 561.716 831.716 555.000 840.000 555.000  c
848.284 555.000 855.000 561.716 855.000 570.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
702.719 483.154 m
706.860 483.154 l
706.860 484.154 l
701.298 484.154 l
701.298 483.154 l
701.746 482.696 702.358 482.074 703.134 481.287  c
703.910 480.501 704.397 479.993 704.594 479.764  c
704.980 479.347 705.248 478.990 705.399 478.693  c
705.550 478.396 705.626 478.107 705.626 477.826  c
705.626 477.357 705.462 476.977 705.134 476.686  c
704.805 476.394 704.381 476.248 703.860 476.248  c
703.485 476.248 703.092 476.311 702.680 476.436  c
702.269 476.561 701.829 476.758 701.360 477.029  c
701.360 475.826 l
701.839 475.639 702.285 475.495 702.696 475.396  c
703.108 475.298 703.485 475.248 703.829 475.248  c
704.735 475.248 705.459 475.475 706.001 475.928  c
706.542 476.381 706.813 476.988 706.813 477.748  c
706.813 478.102 706.746 478.441 706.610 478.764  c
706.475 479.087 706.230 479.467 705.876 479.904  c
705.772 480.019 705.459 480.347 704.938 480.889  c
704.417 481.430 703.678 482.186 702.719 483.154  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
721.947 478.186 m
721.572 478.175 721.364 477.982 721.322 477.607  c
721.322 477.503 721.351 477.402 721.408 477.303  c
721.465 477.204 721.546 477.126 721.650 477.068  c
721.754 477.011 721.864 476.982 721.978 476.982  c
722.082 476.982 722.189 477.011 722.298 477.068  c
722.408 477.126 722.489 477.204 722.541 477.303  c
722.593 477.402 722.619 477.503 722.619 477.607  c
722.608 477.857 722.489 478.029 722.259 478.123  c
723.666 481.076 l
723.353 476.967 l
723.030 476.967 722.832 476.785 722.759 476.420  c
722.759 476.316 722.788 476.214 722.845 476.115  c
722.903 476.016 722.983 475.941 723.088 475.889  c
723.192 475.837 723.306 475.811 723.431 475.811  c
723.535 475.811 723.640 475.837 723.744 475.889  c
723.848 475.941 723.929 476.016 723.986 476.115  c
724.043 476.214 724.072 476.316 724.072 476.420  c
724.061 476.597 723.968 476.753 723.791 476.889  c
724.900 481.264 l
725.150 476.467 l
724.890 476.352 724.754 476.201 724.744 476.014  c
724.744 475.899 724.772 475.792 724.830 475.693  c
724.887 475.594 724.968 475.519 725.072 475.467  c
725.176 475.415 725.280 475.389 725.384 475.389  c
725.499 475.389 725.608 475.415 725.713 475.467  c
725.817 475.519 725.897 475.594 725.955 475.693  c
726.012 475.792 726.041 475.899 726.041 476.014  c
726.030 476.222 725.895 476.373 725.634 476.467  c
725.853 481.279 l
726.947 476.951 l
726.770 476.764 726.681 476.587 726.681 476.420  c
726.681 476.316 726.707 476.214 726.759 476.115  c
726.811 476.016 726.892 475.941 727.002 475.889  c
727.111 475.837 727.218 475.811 727.322 475.811  c
727.436 475.811 727.546 475.837 727.650 475.889  c
727.754 475.941 727.835 476.016 727.892 476.115  c
727.950 476.214 727.978 476.316 727.978 476.420  c
727.936 476.753 727.749 476.951 727.416 477.014  c
726.869 481.076 l
728.384 478.061 l
728.218 477.936 728.134 477.785 728.134 477.607  c
728.134 477.503 728.160 477.402 728.213 477.303  c
728.265 477.204 728.343 477.128 728.447 477.076  c
728.551 477.024 728.660 476.998 728.775 476.998  c
728.890 476.998 728.999 477.024 729.103 477.076  c
729.207 477.128 729.288 477.204 729.345 477.303  c
729.403 477.402 729.431 477.503 729.431 477.607  c
729.379 477.982 729.160 478.170 728.775 478.170  c
727.838 480.873 l
727.838 484.154 l
722.791 484.154 l
722.791 480.873 l
721.947 478.186 l
h
727.494 482.061 m
727.494 481.607 l
723.244 481.607 l
723.244 482.061 l
727.494 482.061 l
h
727.494 483.811 m
727.494 483.357 l
723.244 483.357 l
723.244 483.811 l
727.494 483.811 l
h
733.048 483.154 m
737.189 483.154 l
737.189 484.154 l
731.627 484.154 l
731.627 483.154 l
732.075 482.696 732.686 482.074 733.463 481.287  c
734.239 480.501 734.726 479.993 734.923 479.764  c
735.309 479.347 735.577 478.990 735.728 478.693  c
735.879 478.396 735.955 478.107 735.955 477.826  c
735.955 477.357 735.791 476.977 735.463 476.686  c
735.134 476.394 734.710 476.248 734.189 476.248  c
733.814 476.248 733.421 476.311 733.009 476.436  c
732.598 476.561 732.158 476.758 731.689 477.029  c
731.689 475.826 l
732.168 475.639 732.614 475.495 733.025 475.396  c
733.436 475.298 733.814 475.248 734.158 475.248  c
735.064 475.248 735.788 475.475 736.330 475.928  c
736.871 476.381 737.142 476.988 737.142 477.748  c
737.142 478.102 737.075 478.441 736.939 478.764  c
736.804 479.087 736.559 479.467 736.205 479.904  c
736.101 480.019 735.788 480.347 735.267 480.889  c
734.746 481.430 734.007 482.186 733.048 483.154  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
719.240 480.000 m
719.240 488.284 712.524 495.000 704.240 495.000  c
695.956 495.000 689.240 488.284 689.240 480.000  c
689.240 471.716 695.956 465.000 704.240 465.000  c
712.524 465.000 719.240 471.716 719.240 480.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
923.440 525.000 m
923.440 572.600 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
784.620 521.508 m
743.861 570.266 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
803.336 521.927 m
830.904 558.073 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
749.148 580.115 m
825.092 571.660 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
854.677 573.096 m
908.763 584.504 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
718.470 484.743 m
780.010 505.257 l
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
