%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 291 168
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, March 7, 2016 8:52:25 PM BRT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
291 168 setpagesize
0 0 0 0 setmargins
0 0 setorigin
291 168 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
291.000 0.00000 l
291.000 168.000 l
0.00000 168.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
291.000 0.00000 l
291.000 168.000 l
0.00000 168.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 291 168 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -330.000 -888.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
330.000 888.000 m
621.000 888.000 l
621.000 1056.00 l
330.000 1056.00 l
330.000 888.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -330.000 -888.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -330.000 -888.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -330.000 -888.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
358.479 921.379 m
362.620 921.379 l
362.620 922.379 l
357.058 922.379 l
357.058 921.379 l
357.506 920.921 358.118 920.299 358.894 919.512  c
359.670 918.726 360.157 918.218 360.354 917.989  c
360.740 917.572 361.008 917.215 361.159 916.918  c
361.310 916.622 361.386 916.333 361.386 916.051  c
361.386 915.583 361.222 915.202 360.894 914.911  c
360.565 914.619 360.141 914.473 359.620 914.473  c
359.245 914.473 358.852 914.536 358.440 914.661  c
358.029 914.786 357.589 914.984 357.120 915.254  c
357.120 914.051 l
357.599 913.864 358.045 913.721 358.456 913.622  c
358.868 913.523 359.245 913.473 359.589 913.473  c
360.495 913.473 361.219 913.700 361.761 914.153  c
362.302 914.606 362.573 915.213 362.573 915.973  c
362.573 916.327 362.506 916.666 362.370 916.989  c
362.235 917.312 361.990 917.692 361.636 918.129  c
361.532 918.244 361.219 918.572 360.698 919.114  c
360.177 919.655 359.438 920.411 358.479 921.379  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
377.707 914.395 m
377.332 914.385 377.124 914.192 377.082 913.817  c
377.082 913.713 377.111 913.611 377.168 913.512  c
377.225 913.413 377.306 913.335 377.410 913.278  c
377.514 913.221 377.624 913.192 377.738 913.192  c
377.842 913.192 377.949 913.221 378.058 913.278  c
378.168 913.335 378.249 913.413 378.301 913.512  c
378.353 913.611 378.379 913.713 378.379 913.817  c
378.368 914.067 378.249 914.239 378.019 914.333  c
379.426 917.286 l
379.113 913.176 l
378.790 913.176 378.592 912.994 378.519 912.629  c
378.519 912.525 378.548 912.424 378.605 912.325  c
378.663 912.226 378.743 912.150 378.848 912.098  c
378.952 912.046 379.066 912.020 379.191 912.020  c
379.295 912.020 379.400 912.046 379.504 912.098  c
379.608 912.150 379.689 912.226 379.746 912.325  c
379.803 912.424 379.832 912.525 379.832 912.629  c
379.821 912.806 379.728 912.963 379.551 913.098  c
380.660 917.473 l
380.910 912.676 l
380.650 912.562 380.514 912.411 380.504 912.223  c
380.504 912.109 380.532 912.002 380.590 911.903  c
380.647 911.804 380.728 911.728 380.832 911.676  c
380.936 911.624 381.040 911.598 381.144 911.598  c
381.259 911.598 381.368 911.624 381.473 911.676  c
381.577 911.728 381.657 911.804 381.715 911.903  c
381.772 912.002 381.801 912.109 381.801 912.223  c
381.790 912.431 381.655 912.583 381.394 912.676  c
381.613 917.489 l
382.707 913.161 l
382.530 912.973 382.441 912.796 382.441 912.629  c
382.441 912.525 382.467 912.424 382.519 912.325  c
382.571 912.226 382.652 912.150 382.762 912.098  c
382.871 912.046 382.978 912.020 383.082 912.020  c
383.196 912.020 383.306 912.046 383.410 912.098  c
383.514 912.150 383.595 912.226 383.652 912.325  c
383.710 912.424 383.738 912.525 383.738 912.629  c
383.696 912.963 383.509 913.161 383.176 913.223  c
382.629 917.286 l
384.144 914.270 l
383.978 914.145 383.894 913.994 383.894 913.817  c
383.894 913.713 383.920 913.611 383.973 913.512  c
384.025 913.413 384.103 913.338 384.207 913.286  c
384.311 913.234 384.420 913.208 384.535 913.208  c
384.650 913.208 384.759 913.234 384.863 913.286  c
384.967 913.338 385.048 913.413 385.105 913.512  c
385.163 913.611 385.191 913.713 385.191 913.817  c
385.139 914.192 384.920 914.379 384.535 914.379  c
383.598 917.083 l
383.598 920.364 l
378.551 920.364 l
378.551 917.083 l
377.707 914.395 l
h
383.254 918.270 m
383.254 917.817 l
379.004 917.817 l
379.004 918.270 l
383.254 918.270 l
h
383.254 920.020 m
383.254 919.567 l
379.004 919.567 l
379.004 920.020 l
383.254 920.020 l
h
388.808 919.364 m
392.949 919.364 l
392.949 920.364 l
387.387 920.364 l
387.387 919.364 l
387.835 918.905 388.446 918.283 389.223 917.497  c
389.999 916.710 390.486 916.202 390.683 915.973  c
391.069 915.556 391.337 915.200 391.488 914.903  c
391.639 914.606 391.715 914.317 391.715 914.036  c
391.715 913.567 391.551 913.187 391.223 912.895  c
390.894 912.603 390.470 912.458 389.949 912.458  c
389.574 912.458 389.181 912.520 388.769 912.645  c
388.358 912.770 387.918 912.968 387.449 913.239  c
387.449 912.036 l
387.928 911.848 388.374 911.705 388.785 911.606  c
389.196 911.507 389.574 911.458 389.918 911.458  c
390.824 911.458 391.548 911.684 392.090 912.137  c
392.631 912.590 392.902 913.197 392.902 913.958  c
392.902 914.312 392.835 914.650 392.699 914.973  c
392.564 915.296 392.319 915.676 391.965 916.114  c
391.861 916.228 391.548 916.556 391.027 917.098  c
390.506 917.640 389.767 918.395 388.808 919.364  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
375.000 918.225 m
375.000 926.509 368.284 933.225 360.000 933.225  c
351.716 933.225 345.000 926.509 345.000 918.225  c
345.000 909.941 351.716 903.225 360.000 903.225  c
368.284 903.225 375.000 909.941 375.000 918.225  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
493.240 1003.63 m
497.880 1003.63 l
497.880 1004.63 l
494.318 1004.63 l
494.318 1006.77 l
494.495 1006.71 494.669 1006.66 494.841 1006.64  c
495.013 1006.61 495.182 1006.60 495.349 1006.60  c
496.328 1006.60 497.104 1006.87 497.677 1007.40  c
498.250 1007.94 498.536 1008.66 498.536 1009.57  c
498.536 1010.51 498.242 1011.25 497.654 1011.77  c
497.065 1012.29 496.240 1012.55 495.177 1012.55  c
494.802 1012.55 494.424 1012.52 494.044 1012.46  c
493.664 1012.40 493.271 1012.30 492.865 1012.18  c
492.865 1010.99 l
493.219 1011.18 493.583 1011.32 493.958 1011.41  c
494.333 1011.50 494.729 1011.55 495.146 1011.55  c
495.823 1011.55 496.359 1011.37 496.755 1011.02  c
497.151 1010.67 497.349 1010.18 497.349 1009.57  c
497.349 1008.96 497.151 1008.48 496.755 1008.13  c
496.359 1007.78 495.823 1007.60 495.146 1007.60  c
494.833 1007.60 494.518 1007.63 494.200 1007.70  c
493.883 1007.77 493.562 1007.87 493.240 1008.02  c
493.240 1003.63 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
488.517 978.426 m
488.142 978.416 487.934 978.223 487.892 977.848  c
487.892 977.744 487.920 977.642 487.978 977.543  c
488.035 977.444 488.116 977.366 488.220 977.309  c
488.324 977.252 488.434 977.223 488.548 977.223  c
488.652 977.223 488.759 977.252 488.868 977.309  c
488.978 977.366 489.059 977.444 489.111 977.543  c
489.163 977.642 489.189 977.744 489.189 977.848  c
489.178 978.098 489.059 978.270 488.829 978.364  c
490.236 981.317 l
489.923 977.208 l
489.600 977.208 489.402 977.025 489.329 976.661  c
489.329 976.556 489.358 976.455 489.415 976.356  c
489.473 976.257 489.553 976.181 489.657 976.129  c
489.762 976.077 489.876 976.051 490.001 976.051  c
490.105 976.051 490.210 976.077 490.314 976.129  c
490.418 976.181 490.499 976.257 490.556 976.356  c
490.613 976.455 490.642 976.556 490.642 976.661  c
490.631 976.838 490.538 976.994 490.361 977.129  c
491.470 981.504 l
491.720 976.708 l
491.460 976.593 491.324 976.442 491.314 976.254  c
491.314 976.140 491.342 976.033 491.400 975.934  c
491.457 975.835 491.538 975.760 491.642 975.708  c
491.746 975.655 491.850 975.629 491.954 975.629  c
492.069 975.629 492.178 975.655 492.282 975.708  c
492.387 975.760 492.467 975.835 492.525 975.934  c
492.582 976.033 492.611 976.140 492.611 976.254  c
492.600 976.463 492.465 976.614 492.204 976.708  c
492.423 981.520 l
493.517 977.192 l
493.340 977.004 493.251 976.827 493.251 976.661  c
493.251 976.556 493.277 976.455 493.329 976.356  c
493.381 976.257 493.462 976.181 493.572 976.129  c
493.681 976.077 493.788 976.051 493.892 976.051  c
494.006 976.051 494.116 976.077 494.220 976.129  c
494.324 976.181 494.405 976.257 494.462 976.356  c
494.519 976.455 494.548 976.556 494.548 976.661  c
494.506 976.994 494.319 977.192 493.986 977.254  c
493.439 981.317 l
494.954 978.301 l
494.788 978.176 494.704 978.025 494.704 977.848  c
494.704 977.744 494.730 977.642 494.782 977.543  c
494.835 977.444 494.913 977.369 495.017 977.317  c
495.121 977.265 495.230 977.239 495.345 977.239  c
495.460 977.239 495.569 977.265 495.673 977.317  c
495.777 977.369 495.858 977.444 495.915 977.543  c
495.973 977.642 496.001 977.744 496.001 977.848  c
495.949 978.223 495.730 978.411 495.345 978.411  c
494.407 981.114 l
494.407 984.395 l
489.361 984.395 l
489.361 981.114 l
488.517 978.426 l
h
494.064 982.301 m
494.064 981.848 l
489.814 981.848 l
489.814 982.301 l
494.064 982.301 l
h
494.064 984.051 m
494.064 983.598 l
489.814 983.598 l
489.814 984.051 l
494.064 984.051 l
h
499.618 983.395 m
503.759 983.395 l
503.759 984.395 l
498.197 984.395 l
498.197 983.395 l
498.644 982.937 499.256 982.314 500.032 981.528  c
500.809 980.741 501.295 980.234 501.493 980.004  c
501.879 979.588 502.147 979.231 502.298 978.934  c
502.449 978.637 502.525 978.348 502.525 978.067  c
502.525 977.598 502.361 977.218 502.032 976.926  c
501.704 976.635 501.280 976.489 500.759 976.489  c
500.384 976.489 499.991 976.551 499.579 976.676  c
499.168 976.801 498.728 976.999 498.259 977.270  c
498.259 976.067 l
498.738 975.879 499.184 975.736 499.595 975.637  c
500.006 975.538 500.384 975.489 500.728 975.489  c
501.634 975.489 502.358 975.715 502.900 976.168  c
503.441 976.622 503.712 977.228 503.712 977.989  c
503.712 978.343 503.644 978.681 503.509 979.004  c
503.374 979.327 503.129 979.708 502.775 980.145  c
502.670 980.260 502.358 980.588 501.837 981.129  c
501.316 981.671 500.577 982.426 499.618 983.395  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
510.760 1008.23 m
510.760 1016.51 504.044 1023.23 495.760 1023.23  c
487.476 1023.23 480.760 1016.51 480.760 1008.23  c
480.760 999.941 487.476 993.225 495.760 993.225  c
504.044 993.225 510.760 999.941 510.760 1008.23  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
390.151 1019.31 m
389.620 1019.31 389.198 1019.49 388.886 1019.86  c
388.573 1020.22 388.417 1020.72 388.417 1021.34  c
388.417 1021.98 388.573 1022.48 388.886 1022.84  c
389.198 1023.21 389.620 1023.39 390.151 1023.39  c
390.683 1023.39 391.102 1023.21 391.409 1022.84  c
391.716 1022.48 391.870 1021.98 391.870 1021.34  c
391.870 1020.72 391.716 1020.22 391.409 1019.86  c
391.102 1019.49 390.683 1019.31 390.151 1019.31  c
h
392.495 1015.59 m
392.495 1016.67 l
392.193 1016.53 391.891 1016.43 391.589 1016.36  c
391.287 1016.28 390.990 1016.25 390.698 1016.25  c
389.917 1016.25 389.321 1016.51 388.909 1017.04  c
388.498 1017.56 388.261 1018.36 388.198 1019.42  c
388.427 1019.09 388.716 1018.83 389.065 1018.65  c
389.414 1018.46 389.797 1018.37 390.214 1018.37  c
391.089 1018.37 391.782 1018.64 392.292 1019.17  c
392.802 1019.70 393.058 1020.43 393.058 1021.34  c
393.058 1022.25 392.792 1022.97 392.261 1023.51  c
391.729 1024.06 391.026 1024.33 390.151 1024.33  c
389.131 1024.33 388.354 1023.94 387.823 1023.16  c
387.292 1022.39 387.026 1021.26 387.026 1019.79  c
387.026 1018.41 387.354 1017.31 388.011 1016.48  c
388.667 1015.66 389.547 1015.25 390.651 1015.25  c
390.943 1015.25 391.240 1015.28 391.542 1015.33  c
391.844 1015.39 392.162 1015.48 392.495 1015.59  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
382.757 990.201 m
382.382 990.191 382.174 989.998 382.132 989.623  c
382.132 989.519 382.160 989.417 382.218 989.318  c
382.275 989.219 382.356 989.141 382.460 989.084  c
382.564 989.027 382.674 988.998 382.788 988.998  c
382.892 988.998 382.999 989.027 383.108 989.084  c
383.218 989.141 383.299 989.219 383.351 989.318  c
383.403 989.417 383.429 989.519 383.429 989.623  c
383.418 989.873 383.299 990.045 383.069 990.139  c
384.476 993.092 l
384.163 988.982 l
383.840 988.982 383.642 988.800 383.569 988.436  c
383.569 988.331 383.598 988.230 383.655 988.131  c
383.713 988.032 383.793 987.956 383.897 987.904  c
384.002 987.852 384.116 987.826 384.241 987.826  c
384.345 987.826 384.450 987.852 384.554 987.904  c
384.658 987.956 384.739 988.032 384.796 988.131  c
384.853 988.230 384.882 988.331 384.882 988.436  c
384.871 988.613 384.778 988.769 384.601 988.904  c
385.710 993.279 l
385.960 988.482 l
385.700 988.368 385.564 988.217 385.554 988.029  c
385.554 987.915 385.582 987.808 385.640 987.709  c
385.697 987.610 385.778 987.535 385.882 987.482  c
385.986 987.430 386.090 987.404 386.194 987.404  c
386.309 987.404 386.418 987.430 386.522 987.482  c
386.627 987.535 386.707 987.610 386.765 987.709  c
386.822 987.808 386.851 987.915 386.851 988.029  c
386.840 988.238 386.705 988.389 386.444 988.482  c
386.663 993.295 l
387.757 988.967 l
387.580 988.779 387.491 988.602 387.491 988.436  c
387.491 988.331 387.517 988.230 387.569 988.131  c
387.621 988.032 387.702 987.956 387.812 987.904  c
387.921 987.852 388.028 987.826 388.132 987.826  c
388.246 987.826 388.356 987.852 388.460 987.904  c
388.564 987.956 388.645 988.032 388.702 988.131  c
388.759 988.230 388.788 988.331 388.788 988.436  c
388.746 988.769 388.559 988.967 388.226 989.029  c
387.679 993.092 l
389.194 990.076 l
389.028 989.951 388.944 989.800 388.944 989.623  c
388.944 989.519 388.970 989.417 389.022 989.318  c
389.075 989.219 389.153 989.144 389.257 989.092  c
389.361 989.040 389.470 989.014 389.585 989.014  c
389.700 989.014 389.809 989.040 389.913 989.092  c
390.017 989.144 390.098 989.219 390.155 989.318  c
390.213 989.417 390.241 989.519 390.241 989.623  c
390.189 989.998 389.970 990.186 389.585 990.186  c
388.647 992.889 l
388.647 996.170 l
383.601 996.170 l
383.601 992.889 l
382.757 990.201 l
h
388.304 994.076 m
388.304 993.623 l
384.054 993.623 l
384.054 994.076 l
388.304 994.076 l
h
388.304 995.826 m
388.304 995.373 l
384.054 995.373 l
384.054 995.826 l
388.304 995.826 l
h
393.858 995.170 m
397.999 995.170 l
397.999 996.170 l
392.437 996.170 l
392.437 995.170 l
392.884 994.712 393.496 994.089 394.272 993.303  c
395.049 992.516 395.535 992.008 395.733 991.779  c
396.119 991.363 396.387 991.006 396.538 990.709  c
396.689 990.412 396.765 990.123 396.765 989.842  c
396.765 989.373 396.601 988.993 396.272 988.701  c
395.944 988.410 395.520 988.264 394.999 988.264  c
394.624 988.264 394.231 988.326 393.819 988.451  c
393.408 988.576 392.968 988.774 392.499 989.045  c
392.499 987.842 l
392.978 987.654 393.424 987.511 393.835 987.412  c
394.246 987.313 394.624 987.264 394.968 987.264  c
395.874 987.264 396.598 987.490 397.140 987.943  c
397.681 988.396 397.952 989.003 397.952 989.764  c
397.952 990.118 397.884 990.456 397.749 990.779  c
397.614 991.102 397.369 991.482 397.015 991.920  c
396.910 992.035 396.598 992.363 396.077 992.904  c
395.556 993.446 394.817 994.201 393.858 995.170  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
405.000 1020.00 m
405.000 1028.28 398.284 1035.00 390.000 1035.00  c
381.716 1035.00 375.000 1028.28 375.000 1020.00  c
375.000 1011.72 381.716 1005.00 390.000 1005.00  c
398.284 1005.00 405.000 1011.72 405.000 1020.00  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
451.058 947.661 m
451.620 947.786 452.060 948.038 452.378 948.418  c
452.696 948.799 452.854 949.270 452.854 949.833  c
452.854 950.697 452.558 951.366 451.964 951.840  c
451.370 952.314 450.526 952.551 449.433 952.551  c
449.068 952.551 448.690 952.515 448.300 952.442  c
447.909 952.369 447.511 952.260 447.104 952.114  c
447.104 950.973 l
447.427 951.161 447.784 951.304 448.175 951.403  c
448.565 951.502 448.974 951.551 449.401 951.551  c
450.141 951.551 450.706 951.405 451.097 951.114  c
451.487 950.822 451.683 950.395 451.683 949.833  c
451.683 949.322 451.500 948.921 451.136 948.629  c
450.771 948.338 450.271 948.192 449.636 948.192  c
448.604 948.192 l
448.604 947.223 l
449.683 947.223 l
450.256 947.223 450.698 947.106 451.011 946.872  c
451.323 946.637 451.479 946.301 451.479 945.864  c
451.479 945.416 451.321 945.072 451.003 944.833  c
450.685 944.593 450.229 944.473 449.636 944.473  c
449.302 944.473 448.951 944.507 448.581 944.575  c
448.211 944.642 447.802 944.749 447.354 944.895  c
447.354 943.848 l
447.813 943.723 448.237 943.629 448.628 943.567  c
449.019 943.504 449.386 943.473 449.729 943.473  c
450.636 943.473 451.349 943.676 451.870 944.083  c
452.391 944.489 452.651 945.041 452.651 945.739  c
452.651 946.228 452.513 946.640 452.237 946.973  c
451.961 947.306 451.568 947.536 451.058 947.661  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
442.757 918.426 m
442.382 918.416 442.174 918.223 442.132 917.848  c
442.132 917.744 442.160 917.642 442.218 917.543  c
442.275 917.444 442.356 917.366 442.460 917.309  c
442.564 917.252 442.674 917.223 442.788 917.223  c
442.892 917.223 442.999 917.252 443.108 917.309  c
443.218 917.366 443.299 917.444 443.351 917.543  c
443.403 917.642 443.429 917.744 443.429 917.848  c
443.418 918.098 443.299 918.270 443.069 918.364  c
444.476 921.317 l
444.163 917.208 l
443.840 917.208 443.642 917.025 443.569 916.661  c
443.569 916.556 443.598 916.455 443.655 916.356  c
443.713 916.257 443.793 916.181 443.897 916.129  c
444.002 916.077 444.116 916.051 444.241 916.051  c
444.345 916.051 444.450 916.077 444.554 916.129  c
444.658 916.181 444.739 916.257 444.796 916.356  c
444.853 916.455 444.882 916.556 444.882 916.661  c
444.871 916.838 444.778 916.994 444.601 917.129  c
445.710 921.504 l
445.960 916.708 l
445.700 916.593 445.564 916.442 445.554 916.254  c
445.554 916.140 445.582 916.033 445.640 915.934  c
445.697 915.835 445.778 915.760 445.882 915.708  c
445.986 915.655 446.090 915.629 446.194 915.629  c
446.309 915.629 446.418 915.655 446.522 915.708  c
446.627 915.760 446.707 915.835 446.765 915.934  c
446.822 916.033 446.851 916.140 446.851 916.254  c
446.840 916.463 446.705 916.614 446.444 916.708  c
446.663 921.520 l
447.757 917.192 l
447.580 917.004 447.491 916.827 447.491 916.661  c
447.491 916.556 447.517 916.455 447.569 916.356  c
447.621 916.257 447.702 916.181 447.812 916.129  c
447.921 916.077 448.028 916.051 448.132 916.051  c
448.246 916.051 448.356 916.077 448.460 916.129  c
448.564 916.181 448.645 916.257 448.702 916.356  c
448.759 916.455 448.788 916.556 448.788 916.661  c
448.746 916.994 448.559 917.192 448.226 917.254  c
447.679 921.317 l
449.194 918.301 l
449.028 918.176 448.944 918.025 448.944 917.848  c
448.944 917.744 448.970 917.642 449.022 917.543  c
449.075 917.444 449.153 917.369 449.257 917.317  c
449.361 917.265 449.470 917.239 449.585 917.239  c
449.700 917.239 449.809 917.265 449.913 917.317  c
450.017 917.369 450.098 917.444 450.155 917.543  c
450.213 917.642 450.241 917.744 450.241 917.848  c
450.189 918.223 449.970 918.411 449.585 918.411  c
448.647 921.114 l
448.647 924.395 l
443.601 924.395 l
443.601 921.114 l
442.757 918.426 l
h
448.304 922.301 m
448.304 921.848 l
444.054 921.848 l
444.054 922.301 l
448.304 922.301 l
h
448.304 924.051 m
448.304 923.598 l
444.054 923.598 l
444.054 924.051 l
448.304 924.051 l
h
453.858 923.395 m
457.999 923.395 l
457.999 924.395 l
452.437 924.395 l
452.437 923.395 l
452.884 922.937 453.496 922.314 454.272 921.528  c
455.049 920.741 455.535 920.234 455.733 920.004  c
456.119 919.588 456.387 919.231 456.538 918.934  c
456.689 918.637 456.765 918.348 456.765 918.067  c
456.765 917.598 456.601 917.218 456.272 916.926  c
455.944 916.635 455.520 916.489 454.999 916.489  c
454.624 916.489 454.231 916.551 453.819 916.676  c
453.408 916.801 452.968 916.999 452.499 917.270  c
452.499 916.067 l
452.978 915.879 453.424 915.736 453.835 915.637  c
454.246 915.538 454.624 915.489 454.968 915.489  c
455.874 915.489 456.598 915.715 457.140 916.168  c
457.681 916.622 457.952 917.228 457.952 917.989  c
457.952 918.343 457.884 918.681 457.749 919.004  c
457.614 919.327 457.369 919.708 457.015 920.145  c
456.910 920.260 456.598 920.588 456.077 921.129  c
455.556 921.671 454.817 922.426 453.858 923.395  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
465.000 948.225 m
465.000 956.509 458.284 963.225 450.000 963.225  c
441.716 963.225 435.000 956.509 435.000 948.225  c
435.000 939.941 441.716 933.225 450.000 933.225  c
458.284 933.225 465.000 939.941 465.000 948.225  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
579.914 944.661 m
576.930 949.333 l
579.914 949.333 l
579.914 944.661 l
h
579.601 943.629 m
581.101 943.629 l
581.101 949.333 l
582.351 949.333 l
582.351 950.317 l
581.101 950.317 l
581.101 952.379 l
579.914 952.379 l
579.914 950.317 l
575.976 950.317 l
575.976 949.176 l
579.601 943.629 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
544.824 946.411 m
544.449 946.400 544.240 946.208 544.199 945.833  c
544.199 945.728 544.227 945.627 544.285 945.528  c
544.342 945.429 544.423 945.351 544.527 945.293  c
544.631 945.236 544.740 945.208 544.855 945.208  c
544.959 945.208 545.066 945.236 545.175 945.293  c
545.285 945.351 545.365 945.429 545.417 945.528  c
545.470 945.627 545.496 945.728 545.496 945.833  c
545.485 946.083 545.365 946.254 545.136 946.348  c
546.542 949.301 l
546.230 945.192 l
545.907 945.192 545.709 945.010 545.636 944.645  c
545.636 944.541 545.665 944.439 545.722 944.340  c
545.779 944.241 545.860 944.166 545.964 944.114  c
546.069 944.062 546.183 944.036 546.308 944.036  c
546.412 944.036 546.516 944.062 546.621 944.114  c
546.725 944.166 546.806 944.241 546.863 944.340  c
546.920 944.439 546.949 944.541 546.949 944.645  c
546.938 944.822 546.845 944.978 546.667 945.114  c
547.777 949.489 l
548.027 944.692 l
547.766 944.577 547.631 944.426 547.621 944.239  c
547.621 944.124 547.649 944.017 547.707 943.918  c
547.764 943.819 547.845 943.744 547.949 943.692  c
548.053 943.640 548.157 943.614 548.261 943.614  c
548.376 943.614 548.485 943.640 548.589 943.692  c
548.694 943.744 548.774 943.819 548.832 943.918  c
548.889 944.017 548.917 944.124 548.917 944.239  c
548.907 944.447 548.772 944.598 548.511 944.692  c
548.730 949.504 l
549.824 945.176 l
549.647 944.989 549.558 944.812 549.558 944.645  c
549.558 944.541 549.584 944.439 549.636 944.340  c
549.688 944.241 549.769 944.166 549.878 944.114  c
549.988 944.062 550.095 944.036 550.199 944.036  c
550.313 944.036 550.423 944.062 550.527 944.114  c
550.631 944.166 550.712 944.241 550.769 944.340  c
550.826 944.439 550.855 944.541 550.855 944.645  c
550.813 944.978 550.626 945.176 550.292 945.239  c
549.746 949.301 l
551.261 946.286 l
551.095 946.161 551.011 946.010 551.011 945.833  c
551.011 945.728 551.037 945.627 551.089 945.528  c
551.141 945.429 551.220 945.353 551.324 945.301  c
551.428 945.249 551.537 945.223 551.652 945.223  c
551.766 945.223 551.876 945.249 551.980 945.301  c
552.084 945.353 552.165 945.429 552.222 945.528  c
552.279 945.627 552.308 945.728 552.308 945.833  c
552.256 946.208 552.037 946.395 551.652 946.395  c
550.714 949.098 l
550.714 952.379 l
545.667 952.379 l
545.667 949.098 l
544.824 946.411 l
h
550.371 950.286 m
550.371 949.833 l
546.121 949.833 l
546.121 950.286 l
550.371 950.286 l
h
550.371 952.036 m
550.371 951.583 l
546.121 951.583 l
546.121 952.036 l
550.371 952.036 l
h
558.503 947.661 m
559.066 947.786 559.506 948.038 559.824 948.418  c
560.141 948.799 560.300 949.270 560.300 949.833  c
560.300 950.697 560.003 951.366 559.410 951.840  c
558.816 952.314 557.972 952.551 556.878 952.551  c
556.514 952.551 556.136 952.515 555.746 952.442  c
555.355 952.369 554.957 952.260 554.550 952.114  c
554.550 950.973 l
554.873 951.161 555.230 951.304 555.621 951.403  c
556.011 951.502 556.420 951.551 556.847 951.551  c
557.587 951.551 558.152 951.405 558.542 951.114  c
558.933 950.822 559.128 950.395 559.128 949.833  c
559.128 949.322 558.946 948.921 558.582 948.629  c
558.217 948.338 557.717 948.192 557.082 948.192  c
556.050 948.192 l
556.050 947.223 l
557.128 947.223 l
557.701 947.223 558.144 947.106 558.457 946.872  c
558.769 946.637 558.925 946.301 558.925 945.864  c
558.925 945.416 558.766 945.072 558.449 944.833  c
558.131 944.593 557.675 944.473 557.082 944.473  c
556.748 944.473 556.397 944.507 556.027 944.575  c
555.657 944.642 555.248 944.749 554.800 944.895  c
554.800 943.848 l
555.259 943.723 555.683 943.629 556.074 943.567  c
556.464 943.504 556.832 943.473 557.175 943.473  c
558.082 943.473 558.795 943.676 559.316 944.083  c
559.837 944.489 560.097 945.041 560.097 945.739  c
560.097 946.228 559.959 946.640 559.683 946.973  c
559.407 947.306 559.014 947.536 558.503 947.661  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
594.200 948.225 m
594.200 956.509 587.484 963.225 579.200 963.225  c
570.916 963.225 564.200 956.509 564.200 948.225  c
564.200 939.941 570.916 933.225 579.200 933.225  c
587.484 933.225 594.200 939.941 594.200 948.225  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
576.367 1021.23 m
581.992 1021.23 l
581.992 1021.73 l
578.820 1029.98 l
577.586 1029.98 l
580.570 1022.23 l
576.367 1022.23 l
576.367 1021.23 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
586.957 1000.77 m
586.582 1000.76 586.374 1000.57 586.332 1000.20  c
586.332 1000.09 586.360 999.989 586.418 999.890  c
586.475 999.791 586.556 999.713 586.660 999.656  c
586.764 999.599 586.874 999.570 586.988 999.570  c
587.092 999.570 587.199 999.599 587.308 999.656  c
587.418 999.713 587.499 999.791 587.551 999.890  c
587.603 999.989 587.629 1000.09 587.629 1000.20  c
587.618 1000.45 587.499 1000.62 587.269 1000.71  c
588.676 1003.66 l
588.363 999.555 l
588.040 999.555 587.842 999.372 587.769 999.008  c
587.769 998.903 587.798 998.802 587.855 998.703  c
587.913 998.604 587.993 998.528 588.097 998.476  c
588.202 998.424 588.316 998.398 588.441 998.398  c
588.545 998.398 588.650 998.424 588.754 998.476  c
588.858 998.528 588.939 998.604 588.996 998.703  c
589.053 998.802 589.082 998.903 589.082 999.008  c
589.071 999.185 588.978 999.341 588.801 999.476  c
589.910 1003.85 l
590.160 999.055 l
589.900 998.940 589.764 998.789 589.754 998.601  c
589.754 998.487 589.782 998.380 589.840 998.281  c
589.897 998.182 589.978 998.107 590.082 998.055  c
590.186 998.002 590.290 997.976 590.394 997.976  c
590.509 997.976 590.618 998.002 590.722 998.055  c
590.827 998.107 590.907 998.182 590.965 998.281  c
591.022 998.380 591.051 998.487 591.051 998.601  c
591.040 998.810 590.905 998.961 590.644 999.055  c
590.863 1003.87 l
591.957 999.539 l
591.780 999.351 591.691 999.174 591.691 999.008  c
591.691 998.903 591.717 998.802 591.769 998.703  c
591.821 998.604 591.902 998.528 592.012 998.476  c
592.121 998.424 592.228 998.398 592.332 998.398  c
592.446 998.398 592.556 998.424 592.660 998.476  c
592.764 998.528 592.845 998.604 592.902 998.703  c
592.959 998.802 592.988 998.903 592.988 999.008  c
592.946 999.341 592.759 999.539 592.426 999.601  c
591.879 1003.66 l
593.394 1000.65 l
593.228 1000.52 593.144 1000.37 593.144 1000.20  c
593.144 1000.09 593.170 999.989 593.222 999.890  c
593.275 999.791 593.353 999.716 593.457 999.664  c
593.561 999.612 593.670 999.586 593.785 999.586  c
593.900 999.586 594.009 999.612 594.113 999.664  c
594.217 999.716 594.298 999.791 594.355 999.890  c
594.413 999.989 594.441 1000.09 594.441 1000.20  c
594.389 1000.57 594.170 1000.76 593.785 1000.76  c
592.847 1003.46 l
592.847 1006.74 l
587.801 1006.74 l
587.801 1003.46 l
586.957 1000.77 l
h
592.504 1004.65 m
592.504 1004.20 l
588.254 1004.20 l
588.254 1004.65 l
592.504 1004.65 l
h
592.504 1006.40 m
592.504 1005.95 l
588.254 1005.95 l
588.254 1006.40 l
592.504 1006.40 l
h
598.058 1005.74 m
602.199 1005.74 l
602.199 1006.74 l
596.637 1006.74 l
596.637 1005.74 l
597.084 1005.28 597.696 1004.66 598.472 1003.87  c
599.249 1003.09 599.735 1002.58 599.933 1002.35  c
600.319 1001.93 600.587 1001.58 600.738 1001.28  c
600.889 1000.98 600.965 1000.70 600.965 1000.41  c
600.965 999.945 600.801 999.565 600.472 999.273  c
600.144 998.982 599.720 998.836 599.199 998.836  c
598.824 998.836 598.431 998.898 598.019 999.023  c
597.608 999.148 597.168 999.346 596.699 999.617  c
596.699 998.414 l
597.178 998.226 597.624 998.083 598.035 997.984  c
598.446 997.885 598.824 997.836 599.168 997.836  c
600.074 997.836 600.798 998.062 601.340 998.515  c
601.881 998.969 602.152 999.575 602.152 1000.34  c
602.152 1000.69 602.084 1001.03 601.949 1001.35  c
601.814 1001.67 601.569 1002.05 601.215 1002.49  c
601.110 1002.61 600.798 1002.93 600.277 1003.48  c
599.756 1004.02 599.017 1004.77 598.058 1005.74  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
594.200 1025.83 m
594.200 1034.11 587.484 1040.83 579.200 1040.83  c
570.916 1040.83 564.200 1034.11 564.200 1025.83  c
564.200 1017.54 570.916 1010.83 579.200 1010.83  c
587.484 1010.83 594.200 1017.54 594.200 1025.83  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
412.859 1017.46 m
472.901 1010.77 l
S
newpath
404.908 1018.34 m
417.387 1021.98 l
413.853 1017.34 l
416.281 1012.04 l
h
f
newpath
480.852 1009.88 m
468.373 1006.24 l
471.907 1010.88 l
469.479 1016.18 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
374.230 922.969 m
428.180 940.952 l
S
newpath
435.770 943.482 m
425.967 934.944 l
427.232 940.636 l
422.804 944.430 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
463.948 966.513 m
481.812 989.937 l
S
newpath
459.096 960.152 m
462.398 972.726 l
464.554 967.308 l
470.349 966.662 l
h
f
newpath
486.664 996.298 m
483.362 983.724 l
481.206 989.142 l
475.411 989.788 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
435.249 965.872 m
404.751 1002.35 l
S
newpath
440.379 959.734 m
428.847 965.734 l
434.607 966.639 l
436.519 972.147 l
h
f
newpath
399.621 1008.49 m
411.153 1002.49 l
405.393 1001.59 l
403.481 996.078 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
518.265 1012.97 m
556.695 1021.08 l
S
newpath
510.437 1011.32 m
521.147 1018.69 l
519.243 1013.18 l
523.211 1008.91 l
h
f
newpath
564.523 1022.73 m
553.813 1015.36 l
555.717 1020.87 l
551.749 1025.14 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
579.200 971.225 m
579.200 1002.83 l
S
newpath
579.200 963.225 m
574.200 975.225 l
579.200 972.225 l
584.200 975.225 l
h
f
newpath
579.200 1010.83 m
584.200 998.825 l
579.200 1001.83 l
574.200 998.825 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
